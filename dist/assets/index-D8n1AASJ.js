import*as r from"https://cdn.jsdelivr.net/npm/three@0.112.1/build/three.module.js";import"https://cdn.jsdelivr.net/npm/three@0.112.1/examples/jsm/controls/PointerLockControls.js";import"https://cdn.jsdelivr.net/npm/three@0.112.1/examples/jsm/libs/stats.module.js";import"https://cdn.jsdelivr.net/npm/three@0.112.1/examples/jsm/WebGL.js";import"https://cdn.jsdelivr.net/npm/simplex-noise@2.4.0/simplex-noise.js";import G from"https://cdn.jsdelivr.net/gh/mikechambers/es6-perlin-module/perlin.js";(function(){const l=document.createElement("link").relList;if(l&&l.supports&&l.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))s(t);new MutationObserver(t=>{for(const c of t)if(c.type==="childList")for(const u of c.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&s(u)}).observe(document,{childList:!0,subtree:!0});function d(t){const c={};return t.integrity&&(c.integrity=t.integrity),t.referrerPolicy&&(c.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?c.credentials="include":t.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function s(t){if(t.ep)return;t.ep=!0;const c=d(t);fetch(t.href,c)}})();const P=function(){return{rand_range:function(h,l){return Math.random()*(l-h)+h},rand_normalish:function(){return(Math.random()+Math.random()+Math.random()+Math.random())/4*2-1},rand_int:function(h,l){return Math.round(Math.random()*(l-h)+h)},lerp:function(h,l,d){return h*(d-l)+l},smoothstep:function(h,l,d){return h=h*h*(3-2*h),h*(d-l)+l},smootherstep:function(h,l,d){return h=h*h*h*(h*(h*6-15)+10),h*(d-l)+l},clamp:function(h,l,d){return Math.min(Math.max(h,l),d)},sat:function(h){return Math.min(Math.max(h,0),1)}}}(),M=function(){class h{constructor(){}noise2D(t,c){return G(t,c)*2-1}}class l{constructor(){this._values={}}_Rand(t,c){const u=t+"."+c;return u in this._values||(this._values[u]=Math.random()*2-1),this._values[u]}noise2D(t,c){const u=Math.floor(t),m=Math.floor(c),f=u+1,b=m+1,g=t-u,C=c-m,e=this._Rand(u,m),n=this._Rand(f,m),i=this._Rand(u,b),o=this._Rand(f,b),a=P.lerp(g,e,n),_=P.lerp(g,i,o);return P.lerp(C,a,_)}}class d{constructor(t){this._params=t,this._Init()}_Init(){this._noise={simplex:new SimplexNoise(this._params.seed),perlin:new h,rand:new l}}Get(t,c){const u=t/this._params.scale,m=c/this._params.scale,f=this._noise[this._params.noiseType],b=2**-this._params.persistence;let g=1,C=1,e=0,n=0;for(let i=0;i<this._params.octaves;i++){const o=f.noise2D(u*C,m*C)*.5+.5;n+=o*g,e+=g,g*=b,C*=this._params.lacunarity}return n/=e,Math.pow(n,this._params.exponentiation)*this._params.height}}return{Noise:d}}(),R=function(){class l{constructor(s){const t=new r.Box2(s.min,s.max);this._root={bounds:t,children:[],center:t.getCenter(new r.Vector2),size:t.getSize(new r.Vector2)}}GetChildren(){const s=[];return this._GetChildren(this._root,s),s}_GetChildren(s,t){if(s.children.length==0){t.push(s);return}for(let c of s.children)this._GetChildren(c,t)}Insert(s){this._Insert(this._root,new r.Vector2(s.x,s.z))}_Insert(s,t){if(this._DistanceToChild(s,t)<s.size.x&&s.size.x>500){s.children=this._CreateChildren(s);for(let u of s.children)this._Insert(u,t)}}_DistanceToChild(s,t){return s.center.distanceTo(t)}_CreateChildren(s){const t=s.bounds.getCenter(new r.Vector2),c=new r.Box2(s.bounds.min,t),u=new r.Box2(new r.Vector2(t.x,s.bounds.min.y),new r.Vector2(s.bounds.max.x,t.y)),m=new r.Box2(new r.Vector2(s.bounds.min.x,t.y),new r.Vector2(t.x,s.bounds.max.y)),f=new r.Box2(t,s.bounds.max);return[c,u,m,f].map(g=>({bounds:g,children:[],center:g.getCenter(new r.Vector2),size:g.getSize(new r.Vector2)}))}}return{QuadTree:l}}(),T=function(){class h{constructor(s){this._points=[],this._lerp=s}AddPoint(s,t){this._points.push([s,t])}Get(s){let t=0;for(let f=0;f<this._points.length&&!(this._points[f][0]>=s);f++)t=f;const c=Math.max(0,t-1),u=Math.min(this._points.length-1,t+1),m=Math.min(this._points.length-1,t+2);return t==u?this._points[t][1]:this._lerp((s-this._points[t][0])/(this._points[u][0]-this._points[t][0]),this._points[c][1],this._points[t][1],this._points[u][1],this._points[m][1])}}class l{constructor(s){this._points=[],this._lerp=s}AddPoint(s,t){this._points.push([s,t])}Get(s){let t=0;for(let u=0;u<this._points.length&&!(this._points[u][0]>=s);u++)t=u;const c=Math.min(this._points.length-1,t+1);return t==c?this._points[t][1]:this._lerp((s-this._points[t][0])/(this._points[c][0]-this._points[t][0]),this._points[t][1],this._points[c][1])}}return{CubicHermiteSpline:h,LinearSpline:l}}(),k=function(){return{DictIntersection:function(h,l){const d={};for(let s in l)s in h&&(d[s]=h[s]);return d},DictDifference:function(h,l){const d={...h};for(let s in l)delete d[s];return d}}}();(function(){class h{constructor(e,n,i,o){this._position=n.clone(),this._radius=[i,o],this._generator=e}Get(e,n){const i=this._position.distanceTo(new r.Vector2(e,n));let o=1-P.sat((i-this._radius[0])/(this._radius[1]-this._radius[0]));return o=o*o*(3-2*o),[this._generator.Get(e,n),o]}}new r.Color(8421504);const l=new r.Color(14275986);new r.Color(14275986);const d=new r.Color(16777215);new r.Color(5218063),new r.Color(2856462);const s=new r.Color(2736384);new r.Color(8454016),new r.Color(16744576),new r.Color(0);const t=500,c=10,u=64;class m{constructor(e){const n=(i,o,a)=>o.clone().lerpHSL(a,i);this._colourSpline=[new T.LinearSpline(n),new T.LinearSpline(n)],this._colourSpline[0].AddPoint(0,new r.Color(12035709)),this._colourSpline[0].AddPoint(.5,new r.Color(15851964)),this._colourSpline[0].AddPoint(1,d),this._colourSpline[1].AddPoint(0,s),this._colourSpline[1].AddPoint(.5,new r.Color(13559196)),this._colourSpline[1].AddPoint(1,d),this._params=e}Get(e,n,i){const o=this._params.biomeGenerator.Get(e,i),a=n/100;if(a<.05)return l;const _=this._colourSpline[0].Get(a),p=this._colourSpline[1].Get(a);return _.lerpHSL(p,o)}}class f{constructor(e){this._params=e,this._Init(e)}Destroy(){this._params.group.remove(this._plane)}Hide(){this._plane.visible=!1}Show(){this._plane.visible=!0}_Init(e){const n=new r.Vector3(e.width,0,e.width);this._plane=new r.Mesh(new r.PlaneGeometry(n.x,n.z,e.resolution,e.resolution),e.material),this._plane.castShadow=!1,this._plane.receiveShadow=!0,this._plane.rotation.x=-Math.PI/2,this._params.group.add(this._plane)}_GenerateHeight(e){const n=this._params.offset,i=[];let o=0,a=0;for(let _ of this._params.heightGenerators)i.push(_.Get(e.x+n.x,-e.y+n.y)),o+=i[i.length-1][1];if(o>0)for(let _ of i)a+=_[0]*_[1]/o;return a}*_Rebuild(){const n=[],i=this._params.offset;let o=0;for(let a of this._plane.geometry.vertices)a.z=this._GenerateHeight(a),n.push(this._params.colourGenerator.Get(a.x+i.x,a.z,-a.y+i.y)),o++,o>2e3&&(o=0,yield);for(let a of this._plane.geometry.faces){const _=[a.a,a.b,a.c],p=[];for(let x of _)p.push(n[x]);a.vertexColors=p,o++,o>2e3&&(o=0,yield)}yield,this._plane.geometry.elementsNeedUpdate=!0,this._plane.geometry.verticesNeedUpdate=!0,this._plane.geometry.computeVertexNormals(),this._plane.position.set(i.x,0,i.y)}}class b{constructor(e){this._pool={},this._params=e,this._Reset()}AllocateChunk(e){const n=e.width;n in this._pool||(this._pool[n]=[]);let i=null;return this._pool[n].length>0?(i=this._pool[n].pop(),i._params=e):i=new f(e),i.Hide(),this._queued.push(i),i}_RecycleChunks(e){for(let n of e)n.chunk._params.width in this._pool||(this._pool[n.chunk._params.width]=[]),n.chunk.Hide(),this._pool[n.chunk._params.width].push(n.chunk)}_Reset(){this._active=null,this._queued=[],this._old=[],this._new=[]}get Busy(){return this._active}Update2(){for(let e of this._queued)e._Rebuild().next(),this._new.push(e);if(this._queued=[],!this._active&&!this._queued.length){this._RecycleChunks(this._old);for(let e of this._new)e.Show();this._Reset()}}Update(){if(this._active)this._active.next().done&&(this._active=null);else{const e=this._queued.pop();e&&(this._active=e._Rebuild(),this._new.push(e))}if(!this._active&&!this._queued.length){this._RecycleChunks(this._old);for(let e of this._new)e.Show();this._Reset()}}}class g{constructor(e){this._Init(e)}_Init(e){this._params=e,this._material=new r.MeshStandardMaterial({wireframe:!1,wireframeLinewidth:1,color:16777215,side:r.FrontSide,vertexColors:r.VertexColors}),this._builder=new b,this._InitNoise(e),this._InitBiomes(e),this._InitTerrain(e)}_InitNoise(e){e.guiParams.noise={octaves:6,persistence:.707,lacunarity:1.8,exponentiation:4.5,height:300,scale:1100,noiseType:"simplex",seed:1};const n=()=>{for(let a in this._chunks)this._chunks[a].chunk.Rebuild()},i=e.gui.addFolder("Terrain.Noise");i.add(e.guiParams.noise,"noiseType",["simplex","perlin","rand"]).onChange(n),i.add(e.guiParams.noise,"scale",32,4096).onChange(n),i.add(e.guiParams.noise,"octaves",1,20,1).onChange(n),i.add(e.guiParams.noise,"persistence",.25,1).onChange(n),i.add(e.guiParams.noise,"lacunarity",.01,4).onChange(n),i.add(e.guiParams.noise,"exponentiation",.1,10).onChange(n),i.add(e.guiParams.noise,"height",0,512).onChange(n),this._noise=new M.Noise(e.guiParams.noise),e.guiParams.heightmap={height:16},e.gui.addFolder("Terrain.Heightmap").add(e.guiParams.heightmap,"height",0,128).onChange(n)}_InitBiomes(e){e.guiParams.biomes={octaves:2,persistence:.5,lacunarity:2,exponentiation:3.9,scale:2048,noiseType:"simplex",seed:2,exponentiation:1,height:1};const n=()=>{for(let o in this._chunks)this._chunks[o].chunk.Rebuild()},i=e.gui.addFolder("Terrain.Biomes");i.add(e.guiParams.biomes,"scale",64,4096).onChange(n),i.add(e.guiParams.biomes,"octaves",1,20,1).onChange(n),i.add(e.guiParams.biomes,"persistence",.01,1).onChange(n),i.add(e.guiParams.biomes,"lacunarity",.01,4).onChange(n),i.add(e.guiParams.biomes,"exponentiation",.1,10).onChange(n),this._biomes=new M.Noise(e.guiParams.biomes)}_InitTerrain(e){e.guiParams.terrain={wireframe:!1},this._group=new r.Group,e.scene.add(this._group),e.gui.addFolder("Terrain").add(e.guiParams.terrain,"wireframe").onChange(()=>{for(let i in this._chunks)this._chunks[i].chunk._plane.material.wireframe=e.guiParams.terrain.wireframe}),this._chunks={},this._params=e}_CellIndex(e){const n=e.x+t*.5,i=e.z+t*.5,o=Math.floor(n/t),a=Math.floor(i/t);return[o,a]}_CreateTerrainChunk(e,n){const i={group:this._group,material:this._material,width:n,offset:new r.Vector3(e.x,e.y,0),resolution:u,biomeGenerator:this._biomes,colourGenerator:new m({biomeGenerator:this._biomes}),heightGenerators:[new h(this._noise,e,1e5,100001)]};return this._builder.AllocateChunk(i)}Update(e){this._builder.Update(),this._builder.Busy||this._UpdateVisibleChunks_Quadtree()}_UpdateVisibleChunks_Quadtree(){function e(w){return w.position[0]+"/"+w.position[1]+" ["+w.dimensions[0]+"]"}const n=new R.QuadTree({min:new r.Vector2(-32e3,-32e3),max:new r.Vector2(32e3,32e3)});n.Insert(this._params.camera.position);const i=n.GetChildren();let o={};const a=new r.Vector2,_=new r.Vector2;for(let w of i){w.bounds.getCenter(a),w.bounds.getSize(_);const y={position:[a.x,a.y],bounds:w.bounds,dimensions:[_.x,_.y]},S=e(y);o[S]=y}const p=k.DictIntersection(this._chunks,o),x=k.DictDifference(o,this._chunks),I=Object.values(k.DictDifference(this._chunks,o));this._builder._old.push(...I),o=p;for(let w in x){const[y,S]=x[w].position,v=new r.Vector2(y,S);o[w]={position:[y,S],chunk:this._CreateTerrainChunk(v,x[w].dimensions[0])}}this._chunks=o}_UpdateVisibleChunks_FixedGrid(){function e(_,p){return _+"/"+p}const[n,i]=this._CellIndex(this._params.camera.position),o={};for(let _=-10;_<=c;_++)for(let p=-10;p<=c;p++){const x=e(_+n,p+i);o[x]={position:[_+n,p+i]}}const a=k.DictDifference(o,this._chunks);Object.values(k.DictDifference(this._chunks,o));for(let _ in a){if(_ in this._chunks)continue;const[p,x]=a[_].position,I=new r.Vector2(p*t,x*t);this._chunks[_]={position:[n,i],chunk:this._CreateTerrainChunk(I,t)}}}_UpdateVisibleChunks_Single(){function e(_,p){return _+"/"+p}const[n,i]=this._CellIndex(this._params.camera.position),o=e(n,i);if(o in this._chunks)return;const a=new r.Vector2(n*t,i*t);this._chunks[o]={position:[n,i],chunk:this._CreateTerrainChunk(a,t)}}}return{TerrainChunkManager:g}})();
